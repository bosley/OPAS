
import dill
import types

class MundisQueryException(Exception):
    def __init__(self, dErrArguments):
        Exception.__init__(self, "Error: {0} | {1}".format(
            dErrArguments[0], dErrArguments[1]
            ))
        self.dErrArguments = dErrArguments

class Validator:
    def __init__(self):

        self.maximumList = 536870912

        '''
            Errors that can be generated by the validator
        '''
        self.error = {
            "INVALID_TYPE": (100, "Query must be of type 'dict'"),
            "INVALID_TYPE_DEFINITION": (101, "Invalid key 'type'"),
            "INVALID_LIST_SIZE": (102, "Given list index exceeds accepted range"),
            "INVALID_KEY_KEY": (103, "Invalid key 'key'"),
            "INVALID_VALUE": (104, "Invalid key 'value'"),
            "INVALID_OVERFLOW_TYPE": (105, "Invalid key 'overflow'"),
            "INVALID_OVERFLOW_VALUE": (106, "Unknown 'overflow' value"),
            "INVALID_SETDV_VALUE": (107, "Invalid key 'value' muet be type 'tuple'"),

            "INVALID_GET": (200, "Invalid keys in 'get' query"),
            "INVALID_GETLI": (201, "Invalid keys in 'getli' query"),
            "INVALID_GETDV": (202, "Invalid keys in 'getdv' query"),

            "INVALID_SET": (400, "Invalid keys in 'set' query"),
            "INVALID_SETLI": (401, "Invalid keys in 'setli' query"),
            "INVALID_SETDV": (402, "Invalid keys in 'setdv' query"),

        }

        '''
            Validation router
        '''
        self.router = {
            "get": self.validate_get,
            "getli": self.validate_getli,
            "getdv": self.validate_getdv,
            "set": self.validate_set,
            "setli": self.validate_setli,
            "setdv": self.validate_setdv
        }

        '''
            Types that we allow the user to search by
        '''
        self.valid_type_search = [
            int, float, complex, 
            str, bytes, tuple,
            list, set, dict,
            bytearray, bool, types.FunctionType
            ]

        '''
            Valid overflow handlers
        '''
        self.valid_overflow_handlers = [
            "append",
            "expand"
        ]

        '''
            Valid compination of queries
        '''
        self.valid_queries = {
            "get": [
                ["type"],
                ["key"],
                []
            ],

            "getli": [
                ["key", "index"]
            ],

            "getdv": [
                ["key", "value"]
            ],

            "set": [
                ["key", "value"]
            ],

            "setli": [
                ["key", "value", "index"],
                ["key", "value", "index", "overflow"],
            ],

            "setdv": [
                ["key", "value"]
            ]
        }

    '''
        General validation
    '''
    def examine_basic_configuration(self, query, qtype, qerror):
        # Ensure query is a dictionary
        if not isinstance(query, dict):
            raise MundisQueryException(self.error["INVALID_TYPE"])
        # Ensure the dictionary contains valid keys as-per the
        # valid_queries dictionary based on the qtype
        keys = list(query.keys())
        if keys not in self.valid_queries[qtype]:
            raise MundisQueryException(self.error[qerror])

    '''
        Ensure 'key' key is valid
    '''
    def examine_key(self, key):
        if not isinstance(key, str):
            raise MundisQueryException(self.error["INVALID_KEY_KEY"])

    '''
        Ensure 'index' key is valid
    '''
    def examine_index(self, index):
        if isinstance(index, int):
            if index < 0 or index > self.maximumList:
                raise MundisQueryException(self.error["INVALID_LIST_SIZE"])
        elif isinstance(index, tuple):
            tuple_product = 1
            for x in list(index):
                tuple_product *= x
                if x < 0:
                    raise MundisQueryException(self.error["INVALID_LIST_SIZE"])
            if tuple_product > self.maximumList:
                raise MundisQueryException(self.error["INVALID_LIST_SIZE"])
        else:
            raise MundisQueryException(self.error["INVALID_GETLI"])

    '''
        Ensure 'value' key is valid
    '''
    def examine_value(self, value):
        # No values set are currently filtered
        return

    '''
        Ensure 'overflow' key is valid
    '''
    def examine_overflow(self, overflow):
        if not isinstance(overflow, str):
            raise MundisQueryException(self.error["INVALID_OVERFLOW_TYPE"])
        if overflow not in self.valid_overflow_handlers:
            raise MundisQueryException(self.error["INVALID_OVERFLOW_VALUE"])

    '''
        Validate a get query
    '''
    def validate_get(self, query):
        self.examine_basic_configuration(query, "get", "INVALID_GET")
        keys = list(query.keys())
        if "type" in keys:
            if query["type"] not in self.valid_type_search:
                raise MundisQueryException(self.error["INVALID_TYPE_DEFINITION"])
        if "key" in keys:
            self.examine_key(query["key"])
        return query

    '''
        Validate a get list query
    '''
    def validate_getli(self, query):
        self.examine_basic_configuration(query, "getli", "INVALID_GETLI")
        self.examine_index(query["index"])
        self.examine_key(query["key"])
        return query

    '''
        Validate a get dictionary value
    '''
    def validate_getdv(self, query):
        self.examine_basic_configuration(query, "getdv", "INVALID_GETDV")
        self.examine_value(query["value"])
        self.examine_key(query["key"])
        return query
        
    '''
        Validate a set query
    '''
    def validate_set(self, query):
        keys = list(query.keys())
        self.examine_basic_configuration(query, "set", "INVALID_SET")
        self.examine_value(query["value"])
        if "key" in keys:
            self.examine_key(query["key"])
        return query
        
    '''
        Validate a set list query
    '''
    def validate_setli(self, query):
        self.examine_basic_configuration(query, "setli", "INVALID_SETLI")
        self.examine_index(query["index"])
        self.examine_value(query["value"])
        self.examine_key(query["key"])
        if "overflow" in query.keys():
            self.examine_overflow(query["overflow"])
        return query
        
    '''
        Validate a set dictionary value
    '''
    def validate_setdv(self, query):
        self.examine_basic_configuration(query, "setdv", "INVALID_SETDV")
        self.examine_value(query["value"])
        if not isinstance(query["value"], tuple):
            raise MundisQueryException(self.error["INVALID_SETDV_VALUE"])

        self.examine_key(query["key"])
        return query